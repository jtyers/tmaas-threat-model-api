// Code generated by MockGen. DO NOT EDIT.
// Source: data_flow_diagram_service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jtyers/tmaas-model"
)

// MockDataFlowDiagramService is a mock of DataFlowDiagramService interface.
type MockDataFlowDiagramService struct {
	ctrl     *gomock.Controller
	recorder *MockDataFlowDiagramServiceMockRecorder
}

// MockDataFlowDiagramServiceMockRecorder is the mock recorder for MockDataFlowDiagramService.
type MockDataFlowDiagramServiceMockRecorder struct {
	mock *MockDataFlowDiagramService
}

// NewMockDataFlowDiagramService creates a new mock instance.
func NewMockDataFlowDiagramService(ctrl *gomock.Controller) *MockDataFlowDiagramService {
	mock := &MockDataFlowDiagramService{ctrl: ctrl}
	mock.recorder = &MockDataFlowDiagramServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFlowDiagramService) EXPECT() *MockDataFlowDiagramServiceMockRecorder {
	return m.recorder
}

// CreateDataFlowDiagram mocks base method.
func (m *MockDataFlowDiagramService) CreateDataFlowDiagram(ctx context.Context, dataFlowDiagram model.DataFlowDiagram) (*model.DataFlowDiagram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataFlowDiagram", ctx, dataFlowDiagram)
	ret0, _ := ret[0].(*model.DataFlowDiagram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataFlowDiagram indicates an expected call of CreateDataFlowDiagram.
func (mr *MockDataFlowDiagramServiceMockRecorder) CreateDataFlowDiagram(ctx, dataFlowDiagram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataFlowDiagram", reflect.TypeOf((*MockDataFlowDiagramService)(nil).CreateDataFlowDiagram), ctx, dataFlowDiagram)
}

// GetDataFlowDiagram mocks base method.
func (m *MockDataFlowDiagramService) GetDataFlowDiagram(ctx context.Context, id model.DataFlowDiagramID) (*model.DataFlowDiagram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFlowDiagram", ctx, id)
	ret0, _ := ret[0].(*model.DataFlowDiagram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFlowDiagram indicates an expected call of GetDataFlowDiagram.
func (mr *MockDataFlowDiagramServiceMockRecorder) GetDataFlowDiagram(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFlowDiagram", reflect.TypeOf((*MockDataFlowDiagramService)(nil).GetDataFlowDiagram), ctx, id)
}

// GetDataFlowDiagrams mocks base method.
func (m *MockDataFlowDiagramService) GetDataFlowDiagrams(ctx context.Context) ([]*model.DataFlowDiagram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFlowDiagrams", ctx)
	ret0, _ := ret[0].([]*model.DataFlowDiagram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFlowDiagrams indicates an expected call of GetDataFlowDiagrams.
func (mr *MockDataFlowDiagramServiceMockRecorder) GetDataFlowDiagrams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFlowDiagrams", reflect.TypeOf((*MockDataFlowDiagramService)(nil).GetDataFlowDiagrams), ctx)
}

// UpdateDataFlowDiagram mocks base method.
func (m *MockDataFlowDiagramService) UpdateDataFlowDiagram(ctx context.Context, dataFlowDiagramID model.DataFlowDiagramID, dataFlowDiagram model.DataFlowDiagram) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataFlowDiagram", ctx, dataFlowDiagramID, dataFlowDiagram)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataFlowDiagram indicates an expected call of UpdateDataFlowDiagram.
func (mr *MockDataFlowDiagramServiceMockRecorder) UpdateDataFlowDiagram(ctx, dataFlowDiagramID, dataFlowDiagram interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataFlowDiagram", reflect.TypeOf((*MockDataFlowDiagramService)(nil).UpdateDataFlowDiagram), ctx, dataFlowDiagramID, dataFlowDiagram)
}
