// Code generated by MockGen. DO NOT EDIT.
// Source: inherent_risk_service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/jtyers/tmaas-model"
)

// MockInherentRiskService is a mock of InherentRiskService interface.
type MockInherentRiskService struct {
	ctrl     *gomock.Controller
	recorder *MockInherentRiskServiceMockRecorder
}

// MockInherentRiskServiceMockRecorder is the mock recorder for MockInherentRiskService.
type MockInherentRiskServiceMockRecorder struct {
	mock *MockInherentRiskService
}

// NewMockInherentRiskService creates a new mock instance.
func NewMockInherentRiskService(ctrl *gomock.Controller) *MockInherentRiskService {
	mock := &MockInherentRiskService{ctrl: ctrl}
	mock.recorder = &MockInherentRiskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInherentRiskService) EXPECT() *MockInherentRiskServiceMockRecorder {
	return m.recorder
}

// CreateInherentRisk mocks base method.
func (m *MockInherentRiskService) CreateInherentRisk(ctx context.Context, inherentRisk entities.InherentRisk) (*entities.InherentRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInherentRisk", ctx, inherentRisk)
	ret0, _ := ret[0].(*entities.InherentRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInherentRisk indicates an expected call of CreateInherentRisk.
func (mr *MockInherentRiskServiceMockRecorder) CreateInherentRisk(ctx, inherentRisk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInherentRisk", reflect.TypeOf((*MockInherentRiskService)(nil).CreateInherentRisk), ctx, inherentRisk)
}

// GetInherentRisk mocks base method.
func (m *MockInherentRiskService) GetInherentRisk(ctx context.Context, id entities.InherentRiskID) (*entities.InherentRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInherentRisk", ctx, id)
	ret0, _ := ret[0].(*entities.InherentRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInherentRisk indicates an expected call of GetInherentRisk.
func (mr *MockInherentRiskServiceMockRecorder) GetInherentRisk(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInherentRisk", reflect.TypeOf((*MockInherentRiskService)(nil).GetInherentRisk), ctx, id)
}

// GetInherentRisks mocks base method.
func (m *MockInherentRiskService) GetInherentRisks(ctx context.Context) ([]*entities.InherentRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInherentRisks", ctx)
	ret0, _ := ret[0].([]*entities.InherentRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInherentRisks indicates an expected call of GetInherentRisks.
func (mr *MockInherentRiskServiceMockRecorder) GetInherentRisks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInherentRisks", reflect.TypeOf((*MockInherentRiskService)(nil).GetInherentRisks), ctx)
}

// UpdateInherentRisk mocks base method.
func (m *MockInherentRiskService) UpdateInherentRisk(ctx context.Context, inherentRiskID entities.InherentRiskID, inherentRisk entities.InherentRisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInherentRisk", ctx, inherentRiskID, inherentRisk)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInherentRisk indicates an expected call of UpdateInherentRisk.
func (mr *MockInherentRiskServiceMockRecorder) UpdateInherentRisk(ctx, inherentRiskID, inherentRisk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInherentRisk", reflect.TypeOf((*MockInherentRiskService)(nil).UpdateInherentRisk), ctx, inherentRiskID, inherentRisk)
}
