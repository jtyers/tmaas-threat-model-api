// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/jtyers/tmaas-model"
)

// MockThreatService is a mock of ThreatService interface.
type MockThreatService struct {
	ctrl     *gomock.Controller
	recorder *MockThreatServiceMockRecorder
}

// MockThreatServiceMockRecorder is the mock recorder for MockThreatService.
type MockThreatServiceMockRecorder struct {
	mock *MockThreatService
}

// NewMockThreatService creates a new mock instance.
func NewMockThreatService(ctrl *gomock.Controller) *MockThreatService {
	mock := &MockThreatService{ctrl: ctrl}
	mock.recorder = &MockThreatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreatService) EXPECT() *MockThreatServiceMockRecorder {
	return m.recorder
}

// CreateThreat mocks base method.
func (m *MockThreatService) CreateThreat(ctx context.Context, threat entities.Threat) (*entities.Threat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreat", ctx, threat)
	ret0, _ := ret[0].(*entities.Threat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreat indicates an expected call of CreateThreat.
func (mr *MockThreatServiceMockRecorder) CreateThreat(ctx, threat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreat", reflect.TypeOf((*MockThreatService)(nil).CreateThreat), ctx, threat)
}

// GetThreat mocks base method.
func (m *MockThreatService) GetThreat(ctx context.Context, id entities.ThreatId) (*entities.Threat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreat", ctx, id)
	ret0, _ := ret[0].(*entities.Threat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreat indicates an expected call of GetThreat.
func (mr *MockThreatServiceMockRecorder) GetThreat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreat", reflect.TypeOf((*MockThreatService)(nil).GetThreat), ctx, id)
}

// GetThreats mocks base method.
func (m *MockThreatService) GetThreats(ctx context.Context) ([]*entities.Threat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreats", ctx)
	ret0, _ := ret[0].([]*entities.Threat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreats indicates an expected call of GetThreats.
func (mr *MockThreatServiceMockRecorder) GetThreats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreats", reflect.TypeOf((*MockThreatService)(nil).GetThreats), ctx)
}

// UpdateThreat mocks base method.
func (m *MockThreatService) UpdateThreat(ctx context.Context, threatId entities.ThreatId, threat entities.Threat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThreat", ctx, threatId, threat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThreat indicates an expected call of UpdateThreat.
func (mr *MockThreatServiceMockRecorder) UpdateThreat(ctx, threatId, threat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThreat", reflect.TypeOf((*MockThreatService)(nil).UpdateThreat), ctx, threatId, threat)
}
