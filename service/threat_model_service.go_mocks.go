// Code generated by MockGen. DO NOT EDIT.
// Source: threat_model_service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jtyers/tmaas-model"
)

// MockThreatModelService is a mock of ThreatModelService interface.
type MockThreatModelService struct {
	ctrl     *gomock.Controller
	recorder *MockThreatModelServiceMockRecorder
}

// MockThreatModelServiceMockRecorder is the mock recorder for MockThreatModelService.
type MockThreatModelServiceMockRecorder struct {
	mock *MockThreatModelService
}

// NewMockThreatModelService creates a new mock instance.
func NewMockThreatModelService(ctrl *gomock.Controller) *MockThreatModelService {
	mock := &MockThreatModelService{ctrl: ctrl}
	mock.recorder = &MockThreatModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreatModelService) EXPECT() *MockThreatModelServiceMockRecorder {
	return m.recorder
}

// CreateThreatModel mocks base method.
func (m *MockThreatModelService) CreateThreatModel(ctx context.Context, params model.ThreatModelParams) (*model.ThreatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreatModel", ctx, params)
	ret0, _ := ret[0].(*model.ThreatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreatModel indicates an expected call of CreateThreatModel.
func (mr *MockThreatModelServiceMockRecorder) CreateThreatModel(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreatModel", reflect.TypeOf((*MockThreatModelService)(nil).CreateThreatModel), ctx, params)
}

// DeleteThreatModel mocks base method.
func (m *MockThreatModelService) DeleteThreatModel(ctx context.Context, id model.ThreatModelID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThreatModel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThreatModel indicates an expected call of DeleteThreatModel.
func (mr *MockThreatModelServiceMockRecorder) DeleteThreatModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThreatModel", reflect.TypeOf((*MockThreatModelService)(nil).DeleteThreatModel), ctx, id)
}

// GetThreatModel mocks base method.
func (m *MockThreatModelService) GetThreatModel(ctx context.Context, id model.ThreatModelID) (*model.ThreatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreatModel", ctx, id)
	ret0, _ := ret[0].(*model.ThreatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreatModel indicates an expected call of GetThreatModel.
func (mr *MockThreatModelServiceMockRecorder) GetThreatModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreatModel", reflect.TypeOf((*MockThreatModelService)(nil).GetThreatModel), ctx, id)
}

// GetThreatModels mocks base method.
func (m *MockThreatModelService) GetThreatModels(ctx context.Context) ([]*model.ThreatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreatModels", ctx)
	ret0, _ := ret[0].([]*model.ThreatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreatModels indicates an expected call of GetThreatModels.
func (mr *MockThreatModelServiceMockRecorder) GetThreatModels(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreatModels", reflect.TypeOf((*MockThreatModelService)(nil).GetThreatModels), ctx)
}

// UpdateThreatModel mocks base method.
func (m *MockThreatModelService) UpdateThreatModel(ctx context.Context, threatModelID model.ThreatModelID, params model.ThreatModelParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThreatModel", ctx, threatModelID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThreatModel indicates an expected call of UpdateThreatModel.
func (mr *MockThreatModelServiceMockRecorder) UpdateThreatModel(ctx, threatModelID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThreatModel", reflect.TypeOf((*MockThreatModelService)(nil).UpdateThreatModel), ctx, threatModelID, params)
}
